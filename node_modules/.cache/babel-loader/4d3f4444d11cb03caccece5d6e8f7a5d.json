{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { useLayerLifecycle } from './layer.js';\nimport { withPane } from './pane.js';\nexport function usePathOptions(element, props) {\n  const optionsRef = useRef();\n  useEffect(function updatePathOptions() {\n    if (props.pathOptions !== optionsRef.current) {\n      const options = props.pathOptions ?? {};\n      element.instance.setStyle(options);\n      optionsRef.current = options;\n    }\n  }, [element, props]);\n}\nexport function createPathHook(useElement) {\n  return function usePath(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    usePathOptions(elementRef.current, props);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["/Users/sidram/VSCODEFILES/youtube2022/node_modules/react-leaflet/node_modules/@react-leaflet/core/lib/path.js"],"names":["useEffect","useRef","useLeafletContext","useEventHandlers","useLayerLifecycle","withPane","usePathOptions","element","props","optionsRef","updatePathOptions","pathOptions","current","options","instance","setStyle","createPathHook","useElement","usePath","context","elementRef","eventHandlers"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AAC3C,QAAMC,UAAU,GAAGR,MAAM,EAAzB;AACAD,EAAAA,SAAS,CAAC,SAASU,iBAAT,GAA6B;AACnC,QAAIF,KAAK,CAACG,WAAN,KAAsBF,UAAU,CAACG,OAArC,EAA8C;AAC1C,YAAMC,OAAO,GAAGL,KAAK,CAACG,WAAN,IAAqB,EAArC;AACAJ,MAAAA,OAAO,CAACO,QAAR,CAAiBC,QAAjB,CAA0BF,OAA1B;AACAJ,MAAAA,UAAU,CAACG,OAAX,GAAqBC,OAArB;AACH;AACJ,GANQ,EAMN,CACCN,OADD,EAECC,KAFD,CANM,CAAT;AAUH;AACD,OAAO,SAASQ,cAAT,CAAwBC,UAAxB,EAAoC;AACvC,SAAO,SAASC,OAAT,CAAiBV,KAAjB,EAAwB;AAC3B,UAAMW,OAAO,GAAGjB,iBAAiB,EAAjC;AACA,UAAMkB,UAAU,GAAGH,UAAU,CAACZ,QAAQ,CAACG,KAAD,EAAQW,OAAR,CAAT,EAA2BA,OAA3B,CAA7B;AACAhB,IAAAA,gBAAgB,CAACiB,UAAU,CAACR,OAAZ,EAAqBJ,KAAK,CAACa,aAA3B,CAAhB;AACAjB,IAAAA,iBAAiB,CAACgB,UAAU,CAACR,OAAZ,EAAqBO,OAArB,CAAjB;AACAb,IAAAA,cAAc,CAACc,UAAU,CAACR,OAAZ,EAAqBJ,KAArB,CAAd;AACA,WAAOY,UAAP;AACH,GAPD;AAQH","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { useLayerLifecycle } from './layer.js';\nimport { withPane } from './pane.js';\nexport function usePathOptions(element, props) {\n    const optionsRef = useRef();\n    useEffect(function updatePathOptions() {\n        if (props.pathOptions !== optionsRef.current) {\n            const options = props.pathOptions ?? {};\n            element.instance.setStyle(options);\n            optionsRef.current = options;\n        }\n    }, [\n        element,\n        props\n    ]);\n}\nexport function createPathHook(useElement) {\n    return function usePath(props) {\n        const context = useLeafletContext();\n        const elementRef = useElement(withPane(props, context), context);\n        useEventHandlers(elementRef.current, props.eventHandlers);\n        useLayerLifecycle(elementRef.current, context);\n        usePathOptions(elementRef.current, props);\n        return elementRef;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}