{"ast":null,"code":"/**\n * @remix-run/router v1.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        })\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n\n    let executedLoaders = new Set();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id); // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError); // Add a null for any non-loader matches for proper revalidation on the client\n\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","origin","invariant","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","_temp","redirectLocation","_extends","_isFetchActionRedirect","_window","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","executedLoaders","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["/Users/sidram/VSCODEFILES/TARP-RoboRam/node_modules/@remix-run/router/history.ts","/Users/sidram/VSCODEFILES/TARP-RoboRam/node_modules/@remix-run/router/utils.ts","/Users/sidram/VSCODEFILES/TARP-RoboRam/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return path\n    .replace(/^:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return `/${params[key]!}`;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    let executedLoaders = new Set<string>();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id);\n      // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}