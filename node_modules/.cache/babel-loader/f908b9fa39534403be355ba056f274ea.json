{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"rowsBeforePartialUpdates\"];\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\n\nexport function checkGridRowIdIsValid(id, row) {\n  let detailErrorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'A row was provided without id in the rows prop:';\n\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = _ref => {\n  let {\n    rows,\n    getRowId,\n    loading,\n    rowCount\n  } = _ref;\n  const cache = {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    idRowsLookup: {},\n    idToIdLookup: {},\n    ids: []\n  };\n\n  for (let i = 0; i < rows.length; i += 1) {\n    const row = rows[i];\n    const id = getRowIdFromRowModel(row, getRowId);\n    cache.idRowsLookup[id] = row;\n    cache.idToIdLookup[id] = id;\n    cache.ids.push(id);\n  }\n\n  return cache;\n};\nexport const getRowsStateFromCache = _ref2 => {\n  let {\n    apiRef,\n    previousTree,\n    rowCountProp,\n    loadingProp\n  } = _ref2;\n\n  const _apiRef$current$unsta = apiRef.current.unstable_caches.rows,\n        cacheForGrouping = _objectWithoutPropertiesLoose(_apiRef$current$unsta, _excluded);\n\n  const rowCount = rowCountProp != null ? rowCountProp : 0;\n  const groupingResponse = apiRef.current.unstable_applyStrategyProcessor('rowTreeCreation', _extends({}, cacheForGrouping, {\n    previousTree\n  }));\n  const processedGroupingResponse = apiRef.current.unstable_applyPipeProcessors('hydrateRows', groupingResponse);\n  const dataTopLevelRowCount = processedGroupingResponse.treeDepth === 1 ? processedGroupingResponse.ids.length : Object.values(processedGroupingResponse.tree).filter(node => node.parent == null && !node.isPinned).length;\n  return _extends({}, processedGroupingResponse, {\n    groupingResponseBeforeRowHydration: groupingResponse,\n    loading: loadingProp,\n    totalRowCount: Math.max(rowCount, processedGroupingResponse.ids.length),\n    totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)\n  });\n};\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n\n  if (children == null) {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n\n  return validDescendants;\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}","map":{"version":3,"sources":["/Users/sidram/VS CODE FILES/youtube2022/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","gridPinnedRowsSelector","checkGridRowIdIsValid","id","row","detailErrorMessage","Error","JSON","stringify","join","getRowIdFromRowModel","rowModel","getRowId","createRowsInternalCache","rows","loading","rowCount","cache","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","rowCountPropBeforePartialUpdates","idRowsLookup","idToIdLookup","ids","i","length","push","getRowsStateFromCache","apiRef","previousTree","rowCountProp","loadingProp","_apiRef$current$unsta","current","unstable_caches","cacheForGrouping","groupingResponse","unstable_applyStrategyProcessor","processedGroupingResponse","unstable_applyPipeProcessors","dataTopLevelRowCount","treeDepth","Object","values","tree","filter","node","parent","isPinned","groupingResponseBeforeRowHydration","totalRowCount","Math","max","totalTopLevelRowCount","getTreeNodeDescendants","parentId","skipAutoGeneratedRows","_tree$parentId","children","validDescendants","child","childNode","isAutoGenerated","calculatePinnedRowsHeight","_pinnedRows$top","_pinnedRows$bottom","pinnedRows","topPinnedRowsHeight","top","reduce","acc","value","unstable_getRowHeight","bottomPinnedRowsHeight","bottom"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"rowsBeforePartialUpdates\"];\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\n\nexport function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = ({\n  rows,\n  getRowId,\n  loading,\n  rowCount\n}) => {\n  const cache = {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    idRowsLookup: {},\n    idToIdLookup: {},\n    ids: []\n  };\n\n  for (let i = 0; i < rows.length; i += 1) {\n    const row = rows[i];\n    const id = getRowIdFromRowModel(row, getRowId);\n    cache.idRowsLookup[id] = row;\n    cache.idToIdLookup[id] = id;\n    cache.ids.push(id);\n  }\n\n  return cache;\n};\nexport const getRowsStateFromCache = ({\n  apiRef,\n  previousTree,\n  rowCountProp,\n  loadingProp\n}) => {\n  const _apiRef$current$unsta = apiRef.current.unstable_caches.rows,\n        cacheForGrouping = _objectWithoutPropertiesLoose(_apiRef$current$unsta, _excluded);\n\n  const rowCount = rowCountProp != null ? rowCountProp : 0;\n  const groupingResponse = apiRef.current.unstable_applyStrategyProcessor('rowTreeCreation', _extends({}, cacheForGrouping, {\n    previousTree\n  }));\n  const processedGroupingResponse = apiRef.current.unstable_applyPipeProcessors('hydrateRows', groupingResponse);\n  const dataTopLevelRowCount = processedGroupingResponse.treeDepth === 1 ? processedGroupingResponse.ids.length : Object.values(processedGroupingResponse.tree).filter(node => node.parent == null && !node.isPinned).length;\n  return _extends({}, processedGroupingResponse, {\n    groupingResponseBeforeRowHydration: groupingResponse,\n    loading: loadingProp,\n    totalRowCount: Math.max(rowCount, processedGroupingResponse.ids.length),\n    totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)\n  });\n};\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n\n  if (children == null) {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n\n  return validDescendants;\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}"]},"metadata":{},"sourceType":"module"}